#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –∞–ª—å–±–æ–º –ï–≥–æ—Ä–∞ –ö—Ä–∏–¥–∞ "–ú–µ–Ω—å—à–µ —á–µ–º —Ç—Ä–∏"
"""

import asyncio
import httpx
from datetime import datetime
import json

BASE_URL = "http://localhost:8000/api/v1"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–ª—å–±–æ–º–∞ –ï–≥–æ—Ä–∞ –ö—Ä–∏–¥–∞ "–ú–µ–Ω—å—à–µ —á–µ–º —Ç—Ä–∏"
egor_krid_data = {
    "artist": {
        "name": "–ï–≥–æ—Ä –ö—Ä–∏–¥", 
        "bio": "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—ç–ø–µ—Ä, –ø–µ–≤–µ—Ü –∏ –∞–≤—Ç–æ—Ä –ø–µ—Å–µ–Ω. –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π —Å—Ü–µ–Ω—ã.",
        "country": "–†–æ—Å—Å–∏—è",
        "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Egor_Kreed_2019.jpg/800px-Egor_Kreed_2019.jpg"
    },
    "album": {
        "title": "–ú–µ–Ω—å—à–µ —á–µ–º —Ç—Ä–∏",
        "release_date": "2020-12-25T00:00:00Z",
        "cover_image_url": "https://i.scdn.co/image/ab67616d0000b273f8b3d3f5c6b1c8a0b7e0c5f1"
    },
    "genre": {
        "name": "–•–∏–ø-—Ö–æ–ø",
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Ö–∏–ø-—Ö–æ–ø –∏ –ø–æ–ø-—Ä—ç–ø"
    },
    "tracks": [
        {
            "title": "–ú–µ–Ω—å—à–µ —á–µ–º —Ç—Ä–∏",
            "duration_ms": 189000,  # 3:09
            "popularity": 95,
            "tempo": 128.0,
            "energy": 0.7,
            "valence": 0.6,
            "danceability": 0.8,
            "explicit": False
        },
        {
            "title": "–ì–æ–ª–æ—Å",
            "duration_ms": 178000,  # 2:58
            "popularity": 88,
            "tempo": 120.0,
            "energy": 0.65,
            "valence": 0.55,
            "danceability": 0.75,
            "explicit": False
        },
        {
            "title": "–î–µ–≤–æ—á–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏",
            "duration_ms": 195000,  # 3:15
            "popularity": 82,
            "tempo": 125.0,
            "energy": 0.72,
            "valence": 0.7,
            "danceability": 0.85,
            "explicit": False
        },
        {
            "title": "–°–µ—Ä–¥—Ü–µ–µ–¥–∫–∞",
            "duration_ms": 203000,  # 3:23
            "popularity": 90,
            "tempo": 130.0,
            "energy": 0.8,
            "valence": 0.75,
            "danceability": 0.9,
            "explicit": False
        },
        {
            "title": "–ë—É–¥–∏–ª—å–Ω–∏–∫",
            "duration_ms": 186000,  # 3:06
            "popularity": 75,
            "tempo": 115.0,
            "energy": 0.6,
            "valence": 0.5,
            "danceability": 0.7,
            "explicit": False
        },
        {
            "title": "58",
            "duration_ms": 172000,  # 2:52
            "popularity": 85,
            "tempo": 140.0,
            "energy": 0.85,
            "valence": 0.8,
            "danceability": 0.95,
            "explicit": False
        }
    ]
}

async def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–ª—å–±–æ–º–∞ –ï–≥–æ—Ä–∞ –ö—Ä–∏–¥–∞"""
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –∂–∞–Ω—Ä
            print("üéµ –°–æ–∑–¥–∞–µ–º –∂–∞–Ω—Ä...")
            genre_response = await client.post(f"{BASE_URL}/genres/", json=egor_krid_data["genre"])
            if genre_response.status_code == 201:
                genre_id = genre_response.json()["id"]
                print(f"‚úÖ –ñ–∞–Ω—Ä —Å–æ–∑–¥–∞–Ω —Å ID: {genre_id}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∂–∞–Ω—Ä–∞: {genre_response.text}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∂–∞–Ω—Ä
                genres_response = await client.get(f"{BASE_URL}/genres/")
                if genres_response.status_code == 200:
                    genres = genres_response.json()
                    hip_hop_genre = next((g for g in genres if "—Ö–∏–ø" in g["name"].lower()), None)
                    if hip_hop_genre:
                        genre_id = hip_hop_genre["id"]
                        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∂–∞–Ω—Ä: {genre_id}")
                    else:
                        genre_id = None
                else:
                    genre_id = None
            
            # 2. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–∞
            print("üé§ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–∞...")
            artist_response = await client.post(f"{BASE_URL}/artists/", json=egor_krid_data["artist"])
            if artist_response.status_code == 201:
                artist_id = artist_response.json()["id"]
                print(f"‚úÖ –ê—Ä—Ç–∏—Å—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {artist_id}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞: {artist_response.text}")
                return
            
            # 3. –°–æ–∑–¥–∞–µ–º –∞–ª—å–±–æ–º
            print("üíø –°–æ–∑–¥–∞–µ–º –∞–ª—å–±–æ–º...")
            album_data = {
                **egor_krid_data["album"],
                "artist_id": artist_id,
                "release_date": egor_krid_data["album"]["release_date"]
            }
            album_response = await client.post(f"{BASE_URL}/albums/", json=album_data)
            if album_response.status_code == 201:
                album_id = album_response.json()["id"]
                print(f"‚úÖ –ê–ª—å–±–æ–º —Å–æ–∑–¥–∞–Ω —Å ID: {album_id}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞: {album_response.text}")
                return
            
            # 4. –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–∏
            print("üé∂ –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–∏...")
            created_tracks = []
            for i, track_data in enumerate(egor_krid_data["tracks"], 1):
                track_payload = {
                    **track_data,
                    "artist_id": artist_id,
                    "album_id": album_id,
                    "genre_id": genre_id
                }
                
                track_response = await client.post(f"{BASE_URL}/tracks/", json=track_payload)
                if track_response.status_code == 201:
                    track_id = track_response.json()["id"]
                    created_tracks.append(track_id)
                    print(f"‚úÖ –¢—Ä–µ–∫ {i}/6 '{track_data['title']}' —Å–æ–∑–¥–∞–Ω —Å ID: {track_id}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ '{track_data['title']}': {track_response.text}")
            
            print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ:")
            print(f"   üé§ –ê—Ä—Ç–∏—Å—Ç: –ï–≥–æ—Ä –ö—Ä–∏–¥ (ID: {artist_id})")
            print(f"   üíø –ê–ª—å–±–æ–º: –ú–µ–Ω—å—à–µ —á–µ–º —Ç—Ä–∏ (ID: {album_id})")
            print(f"   üéµ –ñ–∞–Ω—Ä: –•–∏–ø-—Ö–æ–ø (ID: {genre_id})")
            print(f"   üé∂ –¢—Ä–µ–∫–æ–≤: {len(created_tracks)}")
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            album_response = await client.get(f"{BASE_URL}/albums/{album_id}")
            if album_response.status_code == 200:
                album_info = album_response.json()
                print(f"‚úÖ –ê–ª—å–±–æ–º –Ω–∞–π–¥–µ–Ω: {album_info['title']}")
            
            tracks_response = await client.get(f"{BASE_URL}/tracks/", params={"album_id": album_id})
            if tracks_response.status_code == 200:
                tracks = tracks_response.json()
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –≤ –∞–ª—å–±–æ–º–µ: {len(tracks)}")
                for track in tracks:
                    print(f"   üéµ {track['title']} ({track['duration_ms']/1000:.0f}—Å)")
                    
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–ª—å–±–æ–º–∞ –ï–≥–æ—Ä–∞ –ö—Ä–∏–¥–∞ '–ú–µ–Ω—å—à–µ —á–µ–º —Ç—Ä–∏'")
    asyncio.run(create_test_data())
