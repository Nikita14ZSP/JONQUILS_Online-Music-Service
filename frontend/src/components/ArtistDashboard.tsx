import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';

// –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios
const api = axios.create({
    baseURL: 'http://localhost:8001',
    headers: {
        'Content-Type': 'application/json',
    },
});

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞
api.interceptors.request.use((config) => {
    const token = localStorage.getItem('access_token');
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
});

interface Album {
    id: number;
    title: string;
    release_date?: string;
    cover_image_url?: string;
    created_at: string;
}

interface Track {
    id: number;
    title: string;
    album_id?: number;
    duration_ms?: number;
    explicit: boolean;
    popularity: number;
    created_at: string;
}

const ArtistDashboard: React.FC = () => {
    const [albums, setAlbums] = useState<Album[]>([]);
    const [tracks, setTracks] = useState<Track[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [artistStats, setArtistStats] = useState<any>(null);

    const artistId = localStorage.getItem('artist_id');

    const fetchArtistContent = async () => {
        if (!artistId) return;

        try {
            setLoading(true);
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–ª—å–±–æ–º—ã –∞—Ä—Ç–∏—Å—Ç–∞
            const albumsResponse = await api.get(`/api/v1/albums/artist/${artistId}`);
            setAlbums(albumsResponse.data);

            // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∞—Ä—Ç–∏—Å—Ç–∞
            const tracksResponse = await api.get(`/api/v1/artists/${artistId}/tracks`);
            setTracks(tracksResponse.data);

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ä—Ç–∏—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
            try {
                const statsResponse = await api.get(`/api/v1/artists/${artistId}/stats`);
                setArtistStats(statsResponse.data);
            } catch (statsError) {
                console.log('Stats endpoint not available');
            }

        } catch (err: any) {
            console.error("Failed to fetch artist content:", err);
            setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∞—Ä—Ç–∏—Å—Ç–∞.");
        } finally {
            setLoading(false);
        }
    };

    const deleteTrack = async (trackId: number) => {
        if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫?')) return;

        try {
            await api.delete(`/api/v1/tracks/${trackId}`);
            setTracks(tracks.filter(track => track.id !== trackId));
        } catch (err: any) {
            console.error("Failed to delete track:", err);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫.");
        }
    };

    const deleteAlbum = async (albumId: number) => {
        if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–ª—å–±–æ–º? –í—Å–µ —Ç—Ä–µ–∫–∏ –≤ –∞–ª—å–±–æ–º–µ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) return;

        try {
            await api.delete(`/api/v1/albums/${albumId}`);
            setAlbums(albums.filter(album => album.id !== albumId));
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤, —É–¥–∞–ª—è—è —Ç—Ä–µ–∫–∏ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞
            setTracks(tracks.filter(track => track.album_id !== albumId));
        } catch (err: any) {
            console.error("Failed to delete album:", err);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–ª—å–±–æ–º.");
        }
    };

    useEffect(() => {
        fetchArtistContent();
    }, [artistId]);

    if (loading) {
        return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞—Ä—Ç–∏—Å—Ç–∞...</div>;
    }

    return (
        <div style={{ marginTop: '20px' }}>
            <h2>–ü–∞–Ω–µ–ª—å –∞—Ä—Ç–∏—Å—Ç–∞</h2>
            {error && <p style={{ color: 'red' }}>{error}</p>}

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            {artistStats && (
                <div style={{ 
                    display: 'grid', 
                    gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', 
                    gap: '15px', 
                    marginBottom: '20px' 
                }}>
                    <div style={{ 
                        padding: '15px', 
                        backgroundColor: '#333', 
                        borderRadius: '8px', 
                        textAlign: 'center' 
                    }}>
                        <h4>–¢—Ä–µ–∫–æ–≤</h4>
                        <p style={{ fontSize: '24px', margin: '0', color: '#1DB954' }}>
                            {artistStats.total_tracks || tracks.length}
                        </p>
                    </div>
                    <div style={{ 
                        padding: '15px', 
                        backgroundColor: '#333', 
                        borderRadius: '8px', 
                        textAlign: 'center' 
                    }}>
                        <h4>–ê–ª—å–±–æ–º–æ–≤</h4>
                        <p style={{ fontSize: '24px', margin: '0', color: '#1DB954' }}>
                            {artistStats.total_albums || albums.length}
                        </p>
                    </div>
                </div>
            )}

            <div style={{ marginBottom: '20px' }}>
                <h3>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
                    <Link 
                        to="/edit-artist-profile" 
                        style={{ 
                            padding: '10px 20px', 
                            backgroundColor: '#4CAF50', 
                            color: 'white', 
                            textDecoration: 'none', 
                            borderRadius: '6px',
                            fontSize: '14px',
                            fontWeight: 'bold'
                        }}
                    >
                        üé® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                    </Link>
                    <Link 
                        to="/upload-album" 
                        style={{ 
                            padding: '10px 20px', 
                            backgroundColor: '#2196F3', 
                            color: 'white', 
                            textDecoration: 'none', 
                            borderRadius: '6px',
                            fontSize: '14px',
                            fontWeight: 'bold'
                        }}
                    >
                        üíø –°–æ–∑–¥–∞—Ç—å –∞–ª—å–±–æ–º
                    </Link>
                    <Link 
                        to="/upload-track" 
                        style={{ 
                            padding: '10px 20px', 
                            backgroundColor: '#FF9800', 
                            color: 'white', 
                            textDecoration: 'none', 
                            borderRadius: '6px',
                            fontSize: '14px',
                            fontWeight: 'bold'
                        }}
                    >
                        üéµ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫
                    </Link>
                </div>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
                {/* –ê–ª—å–±–æ–º—ã */}
                <div>
                    <h3>–ú–æ–∏ –∞–ª—å–±–æ–º—ã ({albums.length})</h3>
                    {albums.length === 0 ? (
                        <p style={{ color: '#ccc' }}>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–ª—å–±–æ–º–æ–≤.</p>
                    ) : (
                        <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
                            {albums.map((album) => (
                                <div 
                                    key={album.id} 
                                    style={{ 
                                        padding: '10px', 
                                        marginBottom: '10px', 
                                        backgroundColor: '#333', 
                                        borderRadius: '4px' 
                                    }}
                                >
                                    <h4 style={{ margin: '0 0 5px 0' }}>{album.title}</h4>
                                    <p style={{ margin: '0', color: '#ccc', fontSize: '14px' }}>
                                        ID: {album.id} | 
                                        –°–æ–∑–¥–∞–Ω: {new Date(album.created_at).toLocaleDateString()}
                                        {album.release_date && ` | –í—ã–ø—É—Å–∫: ${new Date(album.release_date).toLocaleDateString()}`}
                                    </p>
                                    {album.cover_image_url && (
                                        <img 
                                            src={album.cover_image_url} 
                                            alt={album.title}
                                            style={{ width: '50px', height: '50px', objectFit: 'cover', marginTop: '5px' }}
                                            onError={(e) => {
                                                (e.target as HTMLImageElement).style.display = 'none';
                                            }}
                                        />
                                    )}
                                    <button
                                        onClick={() => deleteAlbum(album.id)}
                                        style={{
                                            marginTop: '10px',
                                            padding: '5px 10px',
                                            backgroundColor: '#f44336',
                                            color: 'white',
                                            border: 'none',
                                            borderRadius: '4px',
                                            cursor: 'pointer',
                                            fontSize: '12px'
                                        }}
                                    >
                                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–ª—å–±–æ–º
                                    </button>
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                {/* –¢—Ä–µ–∫–∏ */}
                <div>
                    <h3>–ú–æ–∏ —Ç—Ä–µ–∫–∏ ({tracks.length})</h3>
                    {tracks.length === 0 ? (
                        <p style={{ color: '#ccc' }}>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.</p>
                    ) : (
                        <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
                            {tracks.map((track) => (
                                <div 
                                    key={track.id} 
                                    style={{ 
                                        padding: '10px', 
                                        marginBottom: '10px', 
                                        backgroundColor: '#333', 
                                        borderRadius: '4px' 
                                    }}
                                >
                                    <h4 style={{ margin: '0 0 5px 0' }}>
                                        {track.title}
                                        {track.explicit && <span style={{ color: 'red', marginLeft: '5px' }}>[E]</span>}
                                    </h4>
                                    <p style={{ margin: '0', color: '#ccc', fontSize: '14px' }}>
                                        ID: {track.id} | 
                                        –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {track.popularity}
                                        {track.duration_ms && ` | ${Math.floor(track.duration_ms / 60000)}:${Math.floor((track.duration_ms % 60000) / 1000).toString().padStart(2, '0')}`}
                                        {track.album_id && ` | –ê–ª—å–±–æ–º ID: ${track.album_id}`}
                                    </p>
                                    <p style={{ margin: '0', color: '#ccc', fontSize: '12px' }}>
                                        –°–æ–∑–¥–∞–Ω: {new Date(track.created_at).toLocaleDateString()}
                                    </p>
                                    <button
                                        onClick={() => deleteTrack(track.id)}
                                        style={{
                                            marginTop: '10px',
                                            padding: '5px 10px',
                                            backgroundColor: '#f44336',
                                            color: 'white',
                                            border: 'none',
                                            borderRadius: '4px',
                                            cursor: 'pointer',
                                            fontSize: '12px'
                                        }}
                                    >
                                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫
                                    </button>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ArtistDashboard;
