#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.ext.asyncio import AsyncSession
from app.db.database import AsyncSessionLocal
from app.db.models import Genre, Artist, Album, Track
from datetime import datetime

async def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    async with AsyncSessionLocal() as db:
        print("üéµ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...")
        
        # 1. –°–æ–∑–¥–∞–µ–º –∂–∞–Ω—Ä—ã
        print("\nüìÇ –°–æ–∑–¥–∞–µ–º –∂–∞–Ω—Ä—ã...")
        genres_data = [
            {"name": "–†–æ–∫", "description": "–†–æ–∫ –º—É–∑—ã–∫–∞"},
            {"name": "–ü–æ–ø", "description": "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –º—É–∑—ã–∫–∞"},
            {"name": "–•–∏–ø-—Ö–æ–ø", "description": "–•–∏–ø-—Ö–æ–ø –∏ —Ä—ç–ø"},
            {"name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è", "description": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞"},
            {"name": "–î–∂–∞–∑", "description": "–î–∂–∞–∑–æ–≤–∞—è –º—É–∑—ã–∫–∞"},
            {"name": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è", "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞"},
            {"name": "–ë–ª—é–∑", "description": "–ë–ª—é–∑"},
            {"name": "–ö–∞–Ω—Ç—Ä–∏", "description": "–ö–∞–Ω—Ç—Ä–∏ –º—É–∑—ã–∫–∞"},
        ]
        
        genres = []
        for genre_data in genres_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∂–∞–Ω—Ä
            from sqlalchemy import select
            query = select(Genre).where(Genre.name == genre_data["name"])
            result = await db.execute(query)
            existing_genre = result.scalar_one_or_none()
            
            if not existing_genre:
                genre = Genre(**genre_data)
                db.add(genre)
                genres.append(genre)
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –∂–∞–Ω—Ä: {genre_data['name']}")
            else:
                genres.append(existing_genre)
                print(f"  ‚ö†Ô∏è  –ñ–∞–Ω—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {genre_data['name']}")
        
        await db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∂–∞–Ω—Ä–æ–≤
        for genre in genres:
            await db.refresh(genre)
        
        # 2. –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        print("\nüé§ –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
        artists_data = [
            {
                "name": "The Beatles",
                "bio": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –±—Ä–∏—Ç–∞–Ω—Å–∫–∞—è —Ä–æ–∫-–≥—Ä—É–ø–ø–∞",
                "country": "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
                "image_url": "https://example.com/beatles.jpg"
            },
            {
                "name": "Queen",
                "bio": "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è —Ä–æ–∫-–≥—Ä—É–ø–ø–∞",
                "country": "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
                "image_url": "https://example.com/queen.jpg"
            },
            {
                "name": "Eminem",
                "bio": "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ä—ç–ø–µ—Ä",
                "country": "–°–®–ê",
                "image_url": "https://example.com/eminem.jpg"
            },
            {
                "name": "Daft Punk",
                "bio": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥—É—ç—Ç",
                "country": "–§—Ä–∞–Ω—Ü–∏—è",
                "image_url": "https://example.com/daftpunk.jpg"
            },
            {
                "name": "–ö–∏–Ω–æ",
                "bio": "–°–æ–≤–µ—Ç—Å–∫–∞—è —Ä–æ–∫-–≥—Ä—É–ø–ø–∞",
                "country": "–°–°–°–†",
                "image_url": "https://example.com/kino.jpg"
            }
        ]
        
        artists = []
        for artist_data in artists_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            query = select(Artist).where(Artist.name == artist_data["name"])
            result = await db.execute(query)
            existing_artist = result.scalar_one_or_none()
            
            if not existing_artist:
                artist = Artist(**artist_data)
                db.add(artist)
                artists.append(artist)
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist_data['name']}")
            else:
                artists.append(existing_artist)
                print(f"  ‚ö†Ô∏è  –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {artist_data['name']}")
        
        await db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        for artist in artists:
            await db.refresh(artist)
        
        # 3. –°–æ–∑–¥–∞–µ–º –∞–ª—å–±–æ–º—ã
        print("\nüíø –°–æ–∑–¥–∞–µ–º –∞–ª—å–±–æ–º—ã...")
        albums_data = [
            {
                "title": "Abbey Road",
                "artist_id": artists[0].id,  # The Beatles
                "release_date": datetime(1969, 9, 26),
                "cover_image_url": "https://example.com/abbey-road.jpg"
            },
            {
                "title": "A Night at the Opera",
                "artist_id": artists[1].id,  # Queen
                "release_date": datetime(1975, 11, 21),
                "cover_image_url": "https://example.com/night-opera.jpg"
            },
            {
                "title": "The Marshall Mathers LP",
                "artist_id": artists[2].id,  # Eminem
                "release_date": datetime(2000, 5, 23),
                "cover_image_url": "https://example.com/mmlp.jpg"
            },
            {
                "title": "Discovery",
                "artist_id": artists[3].id,  # Daft Punk
                "release_date": datetime(2001, 2, 26),
                "cover_image_url": "https://example.com/discovery.jpg"
            },
            {
                "title": "–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏",
                "artist_id": artists[4].id,  # –ö–∏–Ω–æ
                "release_date": datetime(1988, 1, 1),
                "cover_image_url": "https://example.com/gruppa-krovi.jpg"
            }
        ]
        
        albums = []
        for album_data in albums_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–ª—å–±–æ–º
            query = select(Album).where(
                Album.title == album_data["title"],
                Album.artist_id == album_data["artist_id"]
            )
            result = await db.execute(query)
            existing_album = result.scalar_one_or_none()
            
            if not existing_album:
                album = Album(**album_data)
                db.add(album)
                albums.append(album)
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –∞–ª—å–±–æ–º: {album_data['title']}")
            else:
                albums.append(existing_album)
                print(f"  ‚ö†Ô∏è  –ê–ª—å–±–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {album_data['title']}")
        
        await db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–ª—å–±–æ–º–æ–≤
        for album in albums:
            await db.refresh(album)
        
        # 4. –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–∏
        print("\nüéµ –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã –ø–æ –∏–º–µ–Ω–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        rock_genre = next(g for g in genres if g.name == "–†–æ–∫")
        pop_genre = next(g for g in genres if g.name == "–ü–æ–ø")
        hiphop_genre = next(g for g in genres if g.name == "–•–∏–ø-—Ö–æ–ø")
        electronic_genre = next(g for g in genres if g.name == "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è")
        
        tracks_data = [
            # The Beatles - Abbey Road
            {
                "title": "Come Together",
                "artist_id": artists[0].id,
                "album_id": albums[0].id,
                "genre_id": rock_genre.id,
                "duration_ms": 259000,
                "popularity": 85,
                "file_url": "https://www.soundjay.com/misc/sounds/bell-ringing-05.wav",  # –¢–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
                "explicit": False
            },
            {
                "title": "Something",
                "artist_id": artists[0].id,
                "album_id": albums[0].id,
                "genre_id": rock_genre.id,
                "duration_ms": 183000,
                "popularity": 78,
                "file_url": "https://www.soundjay.com/misc/sounds/bell-ringing-05.wav",
                "explicit": False
            },
            # Queen - A Night at the Opera
            {
                "title": "Bohemian Rhapsody",
                "artist_id": artists[1].id,
                "album_id": albums[1].id,
                "genre_id": rock_genre.id,
                "duration_ms": 355000,
                "popularity": 95,
                "file_url": "https://www.soundjay.com/misc/sounds/bell-ringing-05.wav",
                "explicit": False
            },
            # Eminem
            {
                "title": "The Real Slim Shady",
                "artist_id": artists[2].id,
                "album_id": albums[2].id,
                "genre_id": hiphop_genre.id,
                "duration_ms": 284000,
                "popularity": 88,
                "file_url": "https://www.soundjay.com/misc/sounds/bell-ringing-05.wav",
                "explicit": True
            },
            # Daft Punk
            {
                "title": "One More Time",
                "artist_id": artists[3].id,
                "album_id": albums[3].id,
                "genre_id": electronic_genre.id,
                "duration_ms": 320000,
                "popularity": 82,
                "file_url": "https://www.soundjay.com/misc/sounds/bell-ringing-05.wav",
                "explicit": False
            },
            # –ö–∏–Ω–æ
            {
                "title": "–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏",
                "artist_id": artists[4].id,
                "album_id": albums[4].id,
                "genre_id": rock_genre.id,
                "duration_ms": 272000,
                "popularity": 90,
                "file_url": "https://www.soundjay.com/misc/sounds/bell-ringing-05.wav",
                "explicit": False
            }
        ]
        
        tracks = []
        for track_data in tracks_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç—Ä–µ–∫
            query = select(Track).where(
                Track.title == track_data["title"],
                Track.artist_id == track_data["artist_id"]
            )
            result = await db.execute(query)
            existing_track = result.scalar_one_or_none()
            
            if not existing_track:
                track = Track(**track_data)
                db.add(track)
                tracks.append(track)
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Ç—Ä–µ–∫: {track_data['title']}")
            else:
                tracks.append(existing_track)
                print(f"  ‚ö†Ô∏è  –¢—Ä–µ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {track_data['title']}")
        
        await db.commit()
        
        print(f"\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –ñ–∞–Ω—Ä–æ–≤: {len(genres)}")
        print(f"  –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(artists)}")
        print(f"  –ê–ª—å–±–æ–º–æ–≤: {len(albums)}")
        print(f"  –¢—Ä–µ–∫–æ–≤: {len(tracks)}")
        print(f"\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API!")

if __name__ == "__main__":
    asyncio.run(create_test_data())
