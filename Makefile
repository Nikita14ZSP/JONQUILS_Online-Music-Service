# JONQUILS Online Music Service - Makefile
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º

.PHONY: help build up down restart logs clean test install-deps migrate seed backup restore

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
BLUE=\033[0;34m
NC=\033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
	@echo "$(BLUE)JONQUILS Online Music Service$(NC)"
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# ================================
# Docker —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
# ================================

build: ## –°–æ–±—Ä–∞—Ç—å –≤—Å–µ Docker –æ–±—Ä–∞–∑—ã
	@echo "$(BLUE)üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker-compose build

build-prod: ## –°–æ–±—Ä–∞—Ç—å production –æ–±—Ä–∞–∑—ã
	@echo "$(BLUE)üî® –°–±–æ—Ä–∫–∞ production –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker-compose -f docker-compose.prod.yml build

build-backend: ## –°–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ backend
	@echo "$(BLUE)üî® –°–±–æ—Ä–∫–∞ backend...$(NC)"
	docker build -f Dockerfile.backend -t jonquils-backend .

build-frontend: ## –°–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ frontend
	@echo "$(BLUE)üî® –°–±–æ—Ä–∫–∞ frontend...$(NC)"
	docker build -f Dockerfile.frontend -t jonquils-frontend .

up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose up -d
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!$(NC)"
	@echo "$(YELLOW)–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: make status$(NC)"

up-prod: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å production —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ production —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f docker-compose.prod.yml up -d
	@echo "$(GREEN)‚úÖ Production —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!$(NC)"

up-backend: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ backend —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose up -d postgres redis minio clickhouse elasticsearch backend
	
up-frontend: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ frontend
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ frontend...$(NC)"
	docker-compose up -d frontend

down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(RED)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose down

down-prod: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(RED)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ production —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f docker-compose.prod.yml down

restart: down up ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã

restart-backend: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ backend...$(NC)"
	docker-compose restart backend

restart-frontend: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å frontend
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ frontend...$(NC)"
	docker-compose restart frontend

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	docker-compose logs -f

logs-backend: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ backend
	docker-compose logs -f backend

logs-frontend: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ frontend
	docker-compose logs -f frontend

logs-db: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
	docker-compose logs -f postgres clickhouse elasticsearch

logs-storage: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â
	docker-compose logs -f minio redis

logs-etl: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ ETL (Airflow)
	docker-compose logs -f airflow-webserver airflow-scheduler

status: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	docker-compose ps

# ================================
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
# ================================

install-deps: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	pip install -r requirements.txt

setup: install-deps up wait-for-services migrate seed ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –Ω—É–ª—è
	@echo "$(GREEN)üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!$(NC)"

wait-for-services: ## –ñ–¥–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(YELLOW)‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@sleep 30
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã$(NC)"

# ================================
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# ================================

migrate: ## –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ PostgreSQL
	@echo "$(BLUE)üóÉÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	alembic upgrade head

migrate-create: ## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é (use: make migrate-create MESSAGE="–æ–ø–∏—Å–∞–Ω–∏–µ")
	@echo "$(BLUE)üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...$(NC)"
	alembic revision --autogenerate -m "$(MESSAGE)"

migrate-downgrade: ## –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é
	@echo "$(RED)‚¨áÔ∏è –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...$(NC)"
	alembic downgrade -1

seed: ## –ó–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	@echo "$(BLUE)üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...$(NC)"
	python create_test_analytics_data.py
	python test_clickhouse_final.py

# ================================
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ================================

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	python test_infrastructure.py

test-api: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ API
	@echo "$(BLUE)üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...$(NC)"
	pytest app/tests/ -v

test-clickhouse: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å ClickHouse
	@echo "$(BLUE)üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ClickHouse...$(NC)"
	python test_clickhouse_final.py

test-coverage: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	@echo "$(BLUE)üìà –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º...$(NC)"
	pytest --cov=app app/tests/

# ================================
# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
# ================================

dev: ## –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üíª –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

dev-frontend: ## –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üé® –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...$(NC)"
	cd frontend && npm start

lint: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...$(NC)"
	flake8 app/
	black --check app/
	isort --check-only app/

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
	@echo "$(BLUE)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	black app/
	isort app/

# ================================
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç–ª–∞–¥–∫–∞
# ================================

monitor: ## –û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	@echo "$(GREEN)üìä –ü–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:$(NC)"
	@echo "API Docs: http://localhost:8000/docs"
	@echo "Airflow: http://localhost:8080"
	@echo "MinIO Console: http://localhost:9001"
	@echo "Elasticsearch: http://localhost:9200"
	@echo "ClickHouse: http://localhost:8123"

debug-db: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL
	docker-compose exec postgres psql -U erik -d music_service_db

debug-clickhouse: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ClickHouse
	docker-compose exec clickhouse clickhouse-client

debug-redis: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis
	docker-compose exec redis redis-cli -a redispass123

shell-api: ## –û—Ç–∫—Ä—ã—Ç—å shell –≤ API –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	docker-compose exec api bash

# ================================
# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
# ================================

deploy-staging: ## –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ staging
	@echo "$(BLUE)üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ staging...$(NC)"
	@./scripts/deploy.sh staging

deploy-prod: ## –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ production
	@echo "$(BLUE)üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ production...$(NC)"
	@./scripts/deploy.sh production

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@curl -f http://localhost:8000/health || echo "$(RED)‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"
	@curl -f http://localhost:3000/health || echo "$(RED)‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"
	@curl -f http://localhost:9002/minio/health/live || echo "$(RED)‚ùå MinIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"
	@curl -f http://localhost:9200/_cluster/health || echo "$(RED)‚ùå Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

monitor: ## –û—Ç–∫—Ä—ã—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
	@echo "$(BLUE)üìä –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–µ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...$(NC)"
	@echo "Airflow: http://localhost:8080"
	@echo "MinIO Console: http://localhost:9001"
	@echo "Elasticsearch: http://localhost:9200"
	@echo "ClickHouse: http://localhost:8123"
	@echo "Application: http://localhost:3000"

ps: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "$(BLUE)üìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(NC)"
	docker-compose ps

stats: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
	@echo "$(BLUE)üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:$(NC)"
	docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"

# ================================
# –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
# ================================

clean: ## –û—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã
	@echo "$(RED)üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...$(NC)"
	docker-compose down -v
	docker system prune -f
	docker volume prune -f

clean-all: ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–∑—ã)
	@echo "$(RED)üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...$(NC)"
	docker-compose down -v
	docker system prune -af
	docker volume prune -f
	docker image prune -af

reset: clean setup ## –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ

# ================================
# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
# ================================

backup: ## –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
	@echo "$(BLUE)üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...$(NC)"
	@mkdir -p backups/$(shell date +%Y%m%d_%H%M%S)
	@./scripts/backup.sh

backup-db: ## –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è PostgreSQL
	@echo "$(BLUE)üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è PostgreSQL...$(NC)"
	docker exec jonquils-postgres pg_dump -U erik music_service_db > backups/postgres_$(shell date +%Y%m%d_%H%M%S).sql

backup-clickhouse: ## –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è ClickHouse
	@echo "$(BLUE)üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è ClickHouse...$(NC)"