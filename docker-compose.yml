services:
  # Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: jonquils-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://erik:2004@postgres:5432/music_service_db
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=9000
      - CLICKHOUSE_USER=admin
      - CLICKHOUSE_PASSWORD=admin123
      - CLICKHOUSE_DB=jonquils_analytics
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - REDIS_URL=redis://:redispass123@redis:6379/0
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin123
      - S3_BUCKET_TRACKS=tracks
      - S3_BUCKET_COVERS=covers
      - JWT_SECRET_KEY=super-secret-jwt-key-change-in-production
      - ENVIRONMENT=docker
    depends_on:
      - postgres
      - redis
      - minio
      - clickhouse
      - elasticsearch
    volumes:
      - ./app/logs:/app/logs
    networks:
      - jonquils-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Application  
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - DOCKERIGNORE_FILE=.dockerignore.frontend
    container_name: jonquils-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=docker
    networks:
      - jonquils-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jonquils-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=music_service_db
      - POSTGRES_USER=erik
      - POSTGRES_PASSWORD=2004
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - jonquils-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erik -d music_service_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: jonquils-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redispass123
    volumes:
      - redis_data:/data
    networks:
      - jonquils-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: jonquils-minio
    ports:
      - "9001:9001"  # Console
      - "9002:9000"  # API
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    command: server /data --console-address ":9001" --address ":9000"
    volumes:
      - minio_data:/data
    networks:
      - jonquils-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # MinIO Client for bucket creation
  minio-client:
    image: minio/mc:latest
    container_name: jonquils-minio-client
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/tracks --ignore-existing;
      /usr/bin/mc mb myminio/covers --ignore-existing;
      /usr/bin/mc mb myminio/playlists --ignore-existing;
      /usr/bin/mc mb myminio/temp --ignore-existing;
      /usr/bin/mc anonymous set public myminio/covers;
      exit 0;
      "
    networks:
      - jonquils-network

  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: jonquils-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - jonquils-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: jonquils-clickhouse
    ports:
      - "9000:9000"
      - "8123:8123"
    environment:
      - CLICKHOUSE_DB=jonquils_analytics
      - CLICKHOUSE_USER=admin
      - CLICKHOUSE_PASSWORD=admin123
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml
      - ./clickhouse/users.xml:/etc/clickhouse-server/users.xml
      - ./clickhouse/init_fixed.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - jonquils-network
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Apache Airflow for ETL orchestration
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: jonquils-airflow-webserver
    command: webserver
    entrypoint: ./scripts/airflow-entrypoint.sh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://erik:2004@postgres/music_service_db
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://erik:2004@postgres/music_service_db
      - AIRFLOW__CELERY__BROKER_URL=redis://:redispass123@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq3LdUUO7F2Z95cvFFx16hU8jTeR1ASM=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__BASE_URL=http://localhost:8080
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=airflow-secret-key-change-in-production
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/scripts:/opt/airflow/scripts
    ports:
      - "8080:8080"
    networks:
      - jonquils-network
    restart: unless-stopped

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: jonquils-airflow-scheduler
    command: scheduler
    entrypoint: ./scripts/airflow-entrypoint.sh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - LOAD_EX=n
      - EXECUTOR=Local
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://erik:2004@postgres/music_service_db
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://erik:2004@postgres/music_service_db
      - AIRFLOW__CELERY__BROKER_URL=redis://:redispass123@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq3LdUUO7F2Z95cvFFx16hU8jTeR1ASM=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW_HOME=/opt/airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/scripts:/opt/airflow/scripts
    networks:
      - jonquils-network
    restart: unless-stopped

networks:
  jonquils-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  esdata:
    driver: local
  clickhouse_data:
    driver: local 